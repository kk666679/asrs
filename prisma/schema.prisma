 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Warehouse Management System Schema

enum Temperature {
  AMBIENT
  REFRIGERATED
  FROZEN
}

enum SecurityLevel {
  LOW
  MEDIUM
  HIGH
  RESTRICTED
}

enum HazardLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum BinStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DAMAGED
}

enum MovementType {
  PUTAWAY
  PICKING
  TRANSFER
  ADJUSTMENT
  COUNT
}

enum MovementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ShipmentType {
  INBOUND
  OUTBOUND
  TRANSFER
}

enum ShipmentStatus {
  PLANNED
  IN_TRANSIT
  RECEIVED
  PARTIALLY_RECEIVED
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ReplenishmentPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReplenishmentReason {
  LOW_STOCK
  OPTIMIZATION
  SEASONAL
  DEMAND_SPIKE
  REBALANCE
}

enum ReplenishmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum RackOrientation {
  FRONT
  BACK
  SIDE
}

enum SensorType {
  TEMPERATURE
  HUMIDITY
  WEIGHT
  PRESSURE
  MOTION
  LIGHT
  VIBRATION
}

enum SensorStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FAULTY
}

enum RobotType {
  STORAGE_RETRIEVAL
  CONVEYOR
  SORTING
  PACKING
  TRANSPORT
}

enum RobotStatus {
  IDLE
  WORKING
  MAINTENANCE
  ERROR
  OFFLINE
}

enum CommandType {
  MOVE
  PICK
  PLACE
  SCAN
  CALIBRATE
  EMERGENCY_STOP
}

enum CommandStatus {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
  CANCELLED
}

// Core Entities

model Warehouse {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  zones       Zone[]
  users       User[]
  shipments   Shipment[]

  @@map("warehouses")
}

model Zone {
  id            String        @id @default(cuid())
  code          String        @unique
  name          String
  temperature   Temperature
  securityLevel SecurityLevel
  warehouseId   String

  warehouse     Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  aisles        Aisle[]
  sensors       Sensor[]
  robots        Robot[]
  bins          Bin[]
  locations     Location[]

  @@map("zones")
}

model Aisle {
  id          String   @id @default(cuid())
  code        String   @unique
  number      Int
  width       Float
  height      Float
  zoneId      String

  zone        Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  racks       Rack[]
  locations   Location[]

  @@map("aisles")
}

model Rack {
  id          String          @id @default(cuid())
  code        String          @unique
  level       Int
  orientation RackOrientation
  aisleId     String
  positionRow Int             @default(1)
  positionColumn Int          @default(1)
  maxWeight   Float           @default(10000)
  currentWeight Float         @default(0)
  levels      Int             @default(5)
  positionsPerLevel Int       @default(10)
  status      String          @default("ACTIVE")

  aisle       Aisle    @relation(fields: [aisleId], references: [id], onDelete: Cascade)
  bins        Bin[]
  locations   Location[]

  @@map("racks")
}

model Bin {
  id          String     @id @default(cuid())
  code        String     @unique
  capacity    Int
  currentLoad Int       @default(0)
  weightLimit Float
  status      BinStatus @default(ACTIVE)
  barcode     String?    @unique
  rackId      String
  zoneId      String
  positionRow Int        @default(1)
  positionColumn Int     @default(1)
  positionLevel Int      @default(1)
  utilization Float      @default(0)

  rack        Rack       @relation(fields: [rackId], references: [id], onDelete: Cascade)
  zone        Zone       @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  binItems    BinItem[]
  fromMovements Movement[] @relation("MovementFromBin")
  toMovements   Movement[] @relation("MovementToBin")
  sensors     Sensor[]
  handlingUnits HandlingUnit[]
  replenishments Replenishment[]
  locations   Location[]
  putaways    Putaway[]

  @@map("bins")
}

model Item {
  id          String       @id @default(cuid())
  sku         String       @unique
  name        String
  category    String
  weight      Float
  hazardLevel HazardLevel @default(NONE)
  temperature Temperature @default(AMBIENT)
  minStock    Int         @default(0)
  maxStock    Int?
  barcode     String?      @unique
  supplierId  String

  supplier    Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  binItems    BinItem[]
  shipmentItems ShipmentItem[]
  handlingUnitItems HandlingUnitItem[]
  replenishments Replenishment[]
  batches     Batch[]
  reorders    Reorder[]
  inventories Inventory[]
  putaways    Putaway[]
  qualityInspections QualityInspection[]

  @@map("items")
}

model BinItem {
  id          String   @id @default(cuid())
  quantity    Int
  batchNumber String?
  expiryDate  DateTime?
  binId       String
  itemId      String

  bin         Bin      @relation(fields: [binId], references: [id], onDelete: Cascade)
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  movements   Movement[]

  @@unique([binId, itemId, batchNumber])
  @@map("bin_items")
}

model Movement {
  id          String         @id @default(cuid())
  type        MovementType
  quantity    Int
  status      MovementStatus @default(PENDING)
  priority    Priority       @default(MEDIUM)
  timestamp   DateTime       @default(now())
  binItemId   String
  fromBinId   String?
  toBinId     String?
  userId      String

  binItem     BinItem @relation(fields: [binItemId], references: [id], onDelete: Cascade)
  fromBin     Bin?    @relation("MovementFromBin", fields: [fromBinId], references: [id])
  toBin       Bin?    @relation("MovementToBin", fields: [toBinId], references: [id])
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("movements")
}

model Supplier {
  id      String         @id @default(cuid())
  code    String         @unique
  name    String
  contact String?
  email   String?
  status  SupplierStatus @default(ACTIVE)

  items       Item[]
  shipments   Shipment[]
  ingredients Ingredient[]

  @@map("suppliers")
}

model Shipment {
  id                String         @id @default(cuid())
  shipmentNumber    String         @unique
  type              ShipmentType
  status            ShipmentStatus @default(PLANNED)
  expectedArrival   DateTime?
  actualArrival     DateTime?
  barcode           String?        @unique
  warehouseId       String
  supplierId        String

  warehouse         Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  supplier          Supplier   @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  shipmentItems     ShipmentItem[]
  inboundCrossDockings CrossDocking[] @relation("InboundShipment")
  outboundCrossDockings CrossDocking[] @relation("OutboundShipment")

  @@map("shipments")
}

model ShipmentItem {
  id         String @id @default(cuid())
  quantity   Int
  received   Int    @default(0)
  shipmentId String
  itemId     String

  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("shipment_items")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  role      UserRole   @default(OPERATOR)
  status    UserStatus @default(ACTIVE)
  warehouseId String

  warehouse Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  movements Movement[]
  robotCommands RobotCommand[]
  handlingUnits HandlingUnit[]
  replenishments Replenishment[]
  putaways    Putaway[]

  @@map("users")
}

// IoT Sensor Integration

model Sensor {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  type        SensorType
  status      SensorStatus @default(ACTIVE)
  location    String?      // Physical location description
  binId       String?
  zoneId      String?
  calibrationDate DateTime?
  lastMaintenance DateTime?
  thresholdMin Float?
  thresholdMax Float?

  bin         Bin?         @relation(fields: [binId], references: [id])
  zone        Zone?        @relation(fields: [zoneId], references: [id])
  readings    SensorReading[]

  @@map("sensors")
}

model SensorReading {
  id        String   @id @default(cuid())
  sensorId  String
  value     Float
  unit      String   // e.g., "Celsius", "kg", "%"
  timestamp DateTime @default(now())
  quality   Int      @default(100) // Data quality percentage

  sensor    Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)

  @@index([sensorId, timestamp])
  @@map("sensor_readings")
}

// Robotic Integration

model Robot {
  id            String      @id @default(cuid())
  code          String      @unique
  name          String
  type          RobotType
  status        RobotStatus @default(IDLE)
  location      String?     // Current physical location
  batteryLevel  Float?      // Battery percentage
  lastMaintenance DateTime?
  zoneId        String

  zone          Zone        @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  commands      RobotCommand[]

  @@map("robots")
}

model RobotCommand {
  id          String        @id @default(cuid())
  robotId     String
  type        CommandType
  status      CommandStatus @default(PENDING)
  parameters  Json?         // Command-specific parameters
  priority    Priority      @default(MEDIUM)
  createdAt   DateTime      @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  errorMessage String?
  userId      String

  robot       Robot         @relation(fields: [robotId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("robot_commands")
}

// Halal Product Management System Extensions

model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  description String?
  category    String
  weight      Float
  dimensions  String   // e.g., "10x20x30 cm"
  manufacturerId String

  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  certifications ProductCertification[]
  ingredients    Ingredient[]
  warehouseStorages WarehouseStorage[]

  @@map("products")
}

model Manufacturer {
  id             String   @id @default(cuid())
  name           String
  companyDetails String?
  contactInfo    String   // e.g., phone, email, address

  products       Product[]

  @@map("manufacturers")
}

model HalalCertificationBody {
  id               String   @id @default(cuid())
  name             String
  licenseNumber    String   @unique
  validityPeriodStart DateTime
  validityPeriodEnd   DateTime

  productCertifications ProductCertification[]
  ingredientCertifications Ingredient[]
  halalProducts    HalalProduct[]

  @@map("halal_certification_bodies")
}

model ProductCertification {
  id                   String   @id @default(cuid())
  productId            String
  certificationBodyId  String
  issueDate            DateTime
  expiryDate           DateTime

  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  certificationBody   HalalCertificationBody @relation(fields: [certificationBodyId], references: [id], onDelete: Cascade)

  @@unique([productId, certificationBodyId, issueDate])
  @@map("product_certifications")
}

model Ingredient {
  id                   String   @id @default(cuid())
  name                 String
  description          String?
  supplierId           String
  certificationId      String   // FK to HalalCertificationBody
  productId            String

  supplier             Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  certificationBody    HalalCertificationBody @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  product              Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

model WarehouseStorage {
  id                     String   @id @default(cuid())
  productId              String
  location               String   // e.g., ASRS bin ID
  quantityOnHand         Int
  batchLotNumber         String?
  certificationExpiryCheck Boolean @default(true)  // Enforce expiry check

  product                Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("warehouse_storages")
}

// Handling Units Management

enum HandlingUnitType {
  PALLET
  CARTON
  CRATE
  BIN
  CONTAINER
}

enum HandlingUnitStatus {
  AVAILABLE
  IN_TRANSIT
  DAMAGED
  QUARANTINED
  RESERVED
}

model HandlingUnit {
  id          String             @id @default(cuid())
  type        HandlingUnitType
  barcode     String             @unique
  weight      Float
  dimensions  String             // JSON string: {length, width, height}
  location    String?
  status      HandlingUnitStatus @default(AVAILABLE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  assignedTo  String?

  // Relations
  items       HandlingUnitItem[]
  binId       String?
  userId      String?

  bin         Bin?    @relation(fields: [binId], references: [id])
  user        User?   @relation(fields: [userId], references: [id])

  @@map("handling_units")
}

model HandlingUnitItem {
  id          String   @id @default(cuid())
  quantity    Int
  batchNumber String?
  expiryDate  DateTime?
  handlingUnitId String
  itemId      String

  handlingUnit HandlingUnit @relation(fields: [handlingUnitId], references: [id], onDelete: Cascade)
  item         Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([handlingUnitId, itemId, batchNumber])
  @@map("handling_unit_items")
}

// IPFS File Storage

enum IPFSFileStatus {
  PINNED
  UNPINNED
  PENDING
}

model IPFSFile {
  id             String         @id @default(cuid())
  name           String
  hash           String         @unique
  size           Int
  type           String
  uploadedAt     DateTime       @default(now())
  status         IPFSFileStatus @default(PENDING)
  halalCertified Boolean        @default(false)
  certifyingBody String?
  blockchainTx   String?
  description    String?

  @@map("ipfs_files")
}

model Replenishment {
  id              String               @id @default(cuid())
  itemId          String
  binId           String
  quantity        Int
  priority        ReplenishmentPriority @default(MEDIUM)
  reason          ReplenishmentReason   @default(LOW_STOCK)
  status          ReplenishmentStatus   @default(PENDING)
  scheduledDate   DateTime
  actualStartDate DateTime?
  completedDate   DateTime?
  notes           String?
  issues          String?
  assignedTo      String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  item            Item                 @relation(fields: [itemId], references: [id], onDelete: Cascade)
  bin             Bin                  @relation(fields: [binId], references: [id], onDelete: Cascade)
  assignedUser    User?                @relation(fields: [assignedTo], references: [id])

  @@map("replenishments")
}

// Additional Models for API Routes

model Location {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  type        String
  zoneId      String?
  aisleId     String?
  rackId      String?
  binId       String?

  zone        Zone?   @relation(fields: [zoneId], references: [id])
  aisle       Aisle?  @relation(fields: [aisleId], references: [id])
  rack        Rack?   @relation(fields: [rackId], references: [id])
  bin         Bin?    @relation(fields: [binId], references: [id])

  @@map("locations")
}

model Batch {
  id          String   @id @default(cuid())
  batchNumber String   @unique
  itemId      String
  quantity    Int
  expiryDate  DateTime?
  createdAt   DateTime @default(now())
  status      String   @default("ACTIVE")

  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("batches")
}

model Reorder {
  id              String   @id @default(cuid())
  itemId          String
  quantity        Int
  priority        Priority @default(MEDIUM)
  status          String   @default("PENDING")
  requestedAt     DateTime @default(now())
  approvedAt      DateTime?
  completedAt     DateTime?
  notes           String?

  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("reorders")
}

model Inventory {
  id          String   @id @default(cuid())
  itemId      String
  location    String
  quantity    Int
  minStock    Int      @default(0)
  maxStock    Int?
  lastCounted DateTime?
  status      String   @default("ACTIVE")

  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model LaborStandard {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  taskType    String
  standardTime Float   // in minutes
  unit        String   @default("minutes")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("labor_standards")
}

model Putaway {
  id              String   @id @default(cuid())
  itemId          String
  binId           String
  quantity        Int
  priority        Priority @default(MEDIUM)
  status          String   @default("PENDING")
  scheduledAt     DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  assignedTo      String?
  notes           String?

  item            Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  bin             Bin      @relation(fields: [binId], references: [id], onDelete: Cascade)
  assignedUser    User?    @relation(fields: [assignedTo], references: [id])

  @@map("putaways")
}

model QualityInspection {
  id          String   @id @default(cuid())
  itemId      String
  batchNumber String?
  inspector   String
  status      String   @default("PENDING")
  result      String?
  notes       String?
  inspectedAt DateTime?
  createdAt   DateTime @default(now())

  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("quality_inspections")
}

model CrossDocking {
  id              String   @id @default(cuid())
  inboundShipmentId String
  outboundShipmentId String
  status          String   @default("PENDING")
  priority        Priority @default(MEDIUM)
  scheduledAt     DateTime
  startedAt       DateTime?
  completedAt     DateTime?
  notes           String?

  inboundShipment  Shipment @relation("InboundShipment", fields: [inboundShipmentId], references: [id])
  outboundShipment Shipment @relation("OutboundShipment", fields: [outboundShipmentId], references: [id])

  @@unique([inboundShipmentId, outboundShipmentId])
  @@map("cross_docking")
}

model Pallet {
  id          String   @id @default(cuid())
  palletNumber String  @unique
  type        String
  capacity    Int
  currentLoad Int      @default(0)
  location    String?
  status      String   @default("AVAILABLE")
  barcode     String?  @unique

  @@map("pallets")
}

// Comprehensive Halal Management System

enum HalalStatus {
  CERTIFIED
  PENDING
  EXPIRED
  REJECTED
  UNDER_REVIEW
}

enum CertificationType {
  HALAL
  KOSHER
  ORGANIC
  NON_GMO
  FAIR_TRADE
}

enum ProductCategory {
  MEAT_POULTRY
  DAIRY
  BEVERAGES
  SNACKS
  FROZEN_FOODS
  CANNED_GOODS
  SPICES_SEASONINGS
  BAKERY
  CONFECTIONERY
  PERSONAL_CARE
}

enum SlaughterMethod {
  HALAL_ZABIHAH
  MACHINE_SLAUGHTER
  HAND_SLAUGHTER
  NOT_APPLICABLE
}

enum StorageRequirement {
  SEGREGATED
  TEMPERATURE_CONTROLLED
  HUMIDITY_CONTROLLED
  PEST_CONTROLLED
  STANDARD
}

model HalalProduct {
  id                    String              @id @default(cuid())
  sku                   String              @unique
  name                  String
  arabicName            String?
  description           String?
  category              ProductCategory
  subcategory           String?
  brand                 String
  manufacturerId        String
  supplierId            String
  countryOfOrigin       String
  halalStatus           HalalStatus         @default(PENDING)
  certificationBodyId   String?
  certificationNumber   String?
  certificationDate     DateTime?
  expiryDate            DateTime?
  slaughterMethod       SlaughterMethod     @default(NOT_APPLICABLE)
  storageRequirement    StorageRequirement  @default(STANDARD)
  segregationRequired   Boolean             @default(false)
  crossContamRisk       String?             // Risk assessment
  ingredients           String              // JSON array of ingredients
  allergens             String?             // JSON array of allergens
  nutritionalInfo       String?             // JSON object
  weight                Float
  dimensions            String              // JSON: {length, width, height}
  barcode               String?             @unique
  qrCode                String?             @unique
  batchTracking         Boolean             @default(true)
  shelfLife             Int?                // Days
  storageTemp           String?             // Temperature range
  handlingInstructions  String?
  complianceNotes       String?
  auditTrail            String?             // JSON array of audit events
  blockchainHash        String?             // Blockchain verification
  ipfsHash              String?             // IPFS document storage
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  manufacturer          HalalManufacturer   @relation(fields: [manufacturerId], references: [id])
  supplier              HalalSupplier       @relation(fields: [supplierId], references: [id])
  certificationBody     HalalCertificationBody? @relation(fields: [certificationBodyId], references: [id])
  inventoryItems        HalalInventory[]
  auditLogs             HalalAuditLog[]
  inspections           HalalInspection[]
  batches               HalalBatch[]

  @@map("halal_products")
}

model HalalManufacturer {
  id                    String   @id @default(cuid())
  name                  String
  arabicName            String?
  licenseNumber         String   @unique
  address               String
  country               String
  contactPerson         String
  email                 String
  phone                 String
  halalCertification    String   // Certification details
  certificationExpiry   DateTime
  auditDate             DateTime?
  complianceScore       Int      @default(0)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  products              HalalProduct[]

  @@map("halal_manufacturers")
}

model HalalSupplier {
  id                    String   @id @default(cuid())
  name                  String
  arabicName            String?
  licenseNumber         String   @unique
  address               String
  country               String
  contactPerson         String
  email                 String
  phone                 String
  halalCertification    String
  certificationExpiry   DateTime
  auditDate             DateTime?
  complianceScore       Int      @default(0)
  riskAssessment        String?  // JSON risk factors
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  products              HalalProduct[]

  @@map("halal_suppliers")
}

model HalalInventory {
  id                    String   @id @default(cuid())
  productId             String
  location              String   // Warehouse location
  zone                  String   // Halal/Non-Halal zone
  quantity              Int
  batchNumber           String?
  expiryDate            DateTime?
  receivedDate          DateTime @default(now())
  certificationStatus   HalalStatus @default(CERTIFIED)
  segregationCompliant  Boolean  @default(true)
  temperatureLog        String?  // JSON temperature history
  lastInspection        DateTime?
  quarantineStatus      Boolean  @default(false)
  quarantineReason      String?
  releaseDate           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  product               HalalProduct @relation(fields: [productId], references: [id])

  @@map("halal_inventory")
}

model HalalBatch {
  id                    String   @id @default(cuid())
  productId             String
  batchNumber           String   @unique
  productionDate        DateTime
  expiryDate            DateTime
  quantity              Int
  slaughterDate         DateTime?
  slaughterLocation     String?
  halalSupervisor       String?
  certificationRef      String?
  qualityGrade          String?
  testResults           String?  // JSON test data
  traceabilityCode      String?  @unique
  blockchainRecord      String?
  status                String   @default("ACTIVE")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  product               HalalProduct @relation(fields: [productId], references: [id])

  @@map("halal_batches")
}

model HalalAuditLog {
  id          String   @id @default(cuid())
  productId   String
  action      String   // CREATE, UPDATE, MOVE, INSPECT, etc.
  details     String   // JSON details of the action
  userId      String?
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  location    String?

  product     HalalProduct @relation(fields: [productId], references: [id])

  @@map("halal_audit_logs")
}

model HalalInspection {
  id                String   @id @default(cuid())
  productId         String
  inspectorName     String
  inspectionDate    DateTime @default(now())
  inspectionType    String   // ROUTINE, COMPLAINT, RANDOM
  result            String   // PASS, FAIL, CONDITIONAL
  findings          String?  // JSON inspection findings
  correctiveActions String?  // Required actions
  followUpDate      DateTime?
  certificationImpact String? // Impact on certification
  photosIPFS        String?  // IPFS hash for photos
  documentsIPFS     String?  // IPFS hash for documents
  blockchainRecord  String?  // Blockchain verification
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product           HalalProduct @relation(fields: [productId], references: [id])

  @@map("halal_inspections")
}
