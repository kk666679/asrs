// Enhanced ASRS System with Comprehensive Halal Validation Logic
// Real-world Halal industry operations with advanced compliance monitoring

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Warehouse Management Enums

enum Temperature {
  AMBIENT
  REFRIGERATED
  FROZEN
}

enum SecurityLevel {
  LOW
  MEDIUM
  HIGH
  RESTRICTED
}

enum HazardLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum BinStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DAMAGED
}

enum MovementType {
  PUTAWAY
  PICKING
  TRANSFER
  ADJUSTMENT
  COUNT
}

enum MovementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ShipmentType {
  INBOUND
  OUTBOUND
  TRANSFER
}

enum ShipmentStatus {
  PLANNED
  IN_TRANSIT
  RECEIVED
  PARTIALLY_RECEIVED
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RackOrientation {
  FRONT
  BACK
  SIDE
}

enum SensorType {
  TEMPERATURE
  HUMIDITY
  WEIGHT
  PRESSURE
  MOTION
  LIGHT
  VIBRATION
}

enum SensorStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FAULTY
}

enum RobotType {
  STORAGE_RETRIEVAL
  CONVEYOR
  SORTING
  PACKING
  TRANSPORT
}

enum RobotStatus {
  IDLE
  WORKING
  MAINTENANCE
  ERROR
  OFFLINE
}

enum CommandType {
  MOVE
  PICK
  PLACE
  SCAN
  CALIBRATE
  EMERGENCY_STOP
}

enum CommandStatus {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
  CANCELLED
}

// Halal Business Enums
enum HalalProductCategory {
  MEAT
  POULTRY
  SEAFOOD
  DAIRY
  BEVERAGES
  SNACKS
  COSMETICS
  PHARMACEUTICALS
  SUPPLEMENTS
  PROCESSED_FOOD
}

enum CertificationStatus {
  VALID
  EXPIRED
  PENDING_RENEWAL
  SUSPENDED
  REVOKED
}

enum ComplianceLevel {
  FULLY_COMPLIANT
  MINOR_ISSUES
  MAJOR_ISSUES
  NON_COMPLIANT
}

enum MarketRegion {
  MIDDLE_EAST
  SOUTHEAST_ASIA
  EUROPE
  NORTH_AMERICA
  AFRICA
  SOUTH_ASIA
  OCEANIA
}

enum SeasonalDemand {
  RAMADAN_HIGH
  EID_PEAK
  HAJJ_SEASON
  REGULAR
  LOW_SEASON
}

enum BlockchainTransactionType {
  HALAL_CERTIFICATION
  DOCUMENT_UPLOAD
  COMPLIANCE_AUDIT
  SUPPLY_CHAIN_UPDATE
}

enum BlockchainTransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

// Core Warehouse Entities

model Warehouse {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  zones       Zone[]
  users       User[]
  shipments   Shipment[]

  @@map("warehouses")
}

model Zone {
  id            String        @id @default(cuid())
  code          String        @unique
  name          String
  temperature   Temperature
  securityLevel SecurityLevel
  warehouseId   String

  warehouse     Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  aisles        Aisle[]
  sensors       Sensor[]
  robots        Robot[]
  bins          Bin[]

  @@map("zones")
}

model Aisle {
  id          String   @id @default(cuid())
  code        String   @unique
  number      Int
  width       Float
  height      Float
  zoneId      String

  zone        Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  racks       Rack[]

  @@map("aisles")
}

model Rack {
  id          String          @id @default(cuid())
  code        String          @unique
  level       Int
  orientation RackOrientation
  aisleId     String

  aisle       Aisle    @relation(fields: [aisleId], references: [id], onDelete: Cascade)
  bins        Bin[]

  @@map("racks")
}

model Bin {
  id          String     @id @default(cuid())
  code        String     @unique
  capacity    Int
  currentLoad Int       @default(0)
  weightLimit Float
  status      BinStatus @default(ACTIVE)
  barcode     String?    @unique
  rackId      String
  zoneId      String

  rack        Rack       @relation(fields: [rackId], references: [id], onDelete: Cascade)
  zone        Zone       @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  binItems    BinItem[]
  fromMovements Movement[] @relation("MovementFromBin")
  toMovements   Movement[] @relation("MovementToBin")
  sensors     Sensor[]

  @@map("bins")
}

model Item {
  id          String       @id @default(cuid())
  sku         String       @unique
  name        String
  category    String
  weight      Float
  hazardLevel HazardLevel @default(NONE)
  temperature Temperature @default(AMBIENT)
  minStock    Int         @default(0)
  maxStock    Int?
  barcode     String?      @unique
  supplierId  String

  supplier    Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  binItems    BinItem[]
  shipmentItems ShipmentItem[]

  @@map("items")
}

model BinItem {
  id          String   @id @default(cuid())
  quantity    Int
  batchNumber String?
  expiryDate  DateTime?
  binId       String
  itemId      String

  bin         Bin      @relation(fields: [binId], references: [id], onDelete: Cascade)
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  movements   Movement[]

  @@unique([binId, itemId, batchNumber])
  @@map("bin_items")
}

model Movement {
  id          String         @id @default(cuid())
  type        MovementType
  quantity    Int
  status      MovementStatus @default(PENDING)
  priority    Priority       @default(MEDIUM)
  timestamp   DateTime       @default(now())
  binItemId   String
  fromBinId   String?
  toBinId     String?
  userId      String

  binItem     BinItem @relation(fields: [binItemId], references: [id], onDelete: Cascade)
  fromBin     Bin?    @relation("MovementFromBin", fields: [fromBinId], references: [id])
  toBin       Bin?    @relation("MovementToBin", fields: [toBinId], references: [id])
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("movements")
}

model Supplier {
  id      String         @id @default(cuid())
  code    String         @unique
  name    String
  contact String?
  email   String?
  status  SupplierStatus @default(ACTIVE)

  items       Item[]
  shipments   Shipment[]
  ingredients LegacyIngredient[]

  @@map("suppliers")
}

model Shipment {
  id                String         @id @default(cuid())
  shipmentNumber    String         @unique
  type              ShipmentType
  status            ShipmentStatus @default(PLANNED)
  expectedArrival   DateTime?
  actualArrival     DateTime?
  barcode           String?        @unique
  warehouseId       String
  supplierId        String

  warehouse         Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  supplier          Supplier   @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  shipmentItems     ShipmentItem[]

  @@map("shipments")
}

model ShipmentItem {
  id         String @id @default(cuid())
  quantity   Int
  received   Int    @default(0)
  shipmentId String
  itemId     String

  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("shipment_items")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String?
  mfaEnabled Boolean   @default(false)
  mfaSecret String?
  backupCodes String[] @default([])
  role      UserRole   @default(OPERATOR)
  status    UserStatus @default(ACTIVE)
  warehouseId String

  warehouse Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  movements Movement[]
  robotCommands RobotCommand[]

  @@map("users")
}

// IoT Sensor Integration

model Sensor {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  type        SensorType
  status      SensorStatus @default(ACTIVE)
  location    String?      // Physical location description
  binId       String?
  zoneId      String?
  calibrationDate DateTime?
  lastMaintenance DateTime?
  thresholdMin Float?
  thresholdMax Float?

  bin         Bin?         @relation(fields: [binId], references: [id])
  zone        Zone?        @relation(fields: [zoneId], references: [id])
  sensorReadings SensorReading[]

  @@map("sensors")
}

model SensorReading {
  id        String   @id @default(cuid())
  sensorId  String
  value     Float
  unit      String   // e.g., "Celsius", "kg", "%"
  timestamp DateTime @default(now())
  quality   Int      @default(100) // Data quality percentage

  sensor    Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)

  @@index([sensorId, timestamp])
  @@map("sensor_readings")
}

// Robotic Integration

model Robot {
  id            String      @id @default(cuid())
  code          String      @unique
  name          String
  type          RobotType
  status        RobotStatus @default(IDLE)
  location      String?     // Current physical location
  batteryLevel  Float?      // Battery percentage
  lastMaintenance DateTime?
  zoneId        String

  zone          Zone        @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  robotCommands RobotCommand[]

  @@map("robots")
}

model RobotCommand {
  id          String        @id @default(cuid())
  robotId     String
  type        CommandType
  status      CommandStatus @default(PENDING)
  parameters  Json?         // Command-specific parameters
  priority    Priority      @default(MEDIUM)
  createdAt   DateTime      @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  errorMessage String?
  userId      String

  robot       Robot         @relation(fields: [robotId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("robot_commands")
}

// Enhanced Halal Product Management System

model HalalProduct {
  id                    String                @id @default(cuid())
  sku                   String                @unique
  name                  String
  description           String?
  category              HalalProductCategory
  subcategory           String?
  weight                Float
  dimensions            String
  sourceCountry         String
  manufacturerId        String
  halalComplianceScore  Float                 @default(0) // 0-100 score
  isHalalCertified      Boolean               @default(false)
  certificationStatus   CertificationStatus   @default(PENDING_RENEWAL)
  lastAuditDate         DateTime?
  nextAuditDue          DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  manufacturer          HalalManufacturer     @relation(fields: [manufacturerId], references: [id])
  certifications        HalalCertification[]
  ingredients           HalalIngredient[]
  inventory             HalalInventory[]
  sales                 HalalSales[]
  complianceChecks      ComplianceCheck[]
  marketData            MarketData[]

  @@map("halal_products")
}

model HalalManufacturer {
  id                    String                @id @default(cuid())
  name                  String
  country               String
  region                MarketRegion
  contactInfo           String
  halalCertificationId  String?
  complianceLevel       ComplianceLevel       @default(FULLY_COMPLIANT)
  reliabilityScore      Float                 @default(85) // 0-100
  averageLeadTime       Int                   @default(14) // days
  certificationRenewalRate Float              @default(95) // percentage
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  products              HalalProduct[]
  certificationBody     HalalCertificationBody? @relation(fields: [halalCertificationId], references: [id])
  auditHistory          ManufacturerAudit[]

  @@map("halal_manufacturers")
}

model HalalCertificationBody {
  id                    String                @id @default(cuid())
  name                  String
  country               String
  licenseNumber         String                @unique
  accreditationLevel    String                // International, National, Regional
  validityStart         DateTime
  validityEnd           DateTime
  performanceScore      Float                 @default(90) // 0-100
  processingTime        Int                   @default(30) // average days
  renewalRate           Float                 @default(88) // percentage
  createdAt             DateTime              @default(now())

  certifications        HalalCertification[]
  manufacturers         HalalManufacturer[]
  auditReports          AuditReport[]
  ingredients           HalalIngredient[]

  @@map("halal_certification_bodies")
}

model HalalCertification {
  id                    String                @id @default(cuid())
  certificateNumber     String                @unique
  productId             String
  certificationBodyId   String
  issueDate             DateTime
  expiryDate            DateTime
  status                CertificationStatus   @default(VALID)
  renewalNotified       Boolean               @default(false)
  complianceScore       Float                 @default(95)
  auditFrequency        Int                   @default(12) // months
  lastRenewalDate       DateTime?
  daysUntilExpiry       Int?                  // computed field
  createdAt             DateTime              @default(now())

  product               HalalProduct          @relation(fields: [productId], references: [id])
  certificationBody     HalalCertificationBody @relation(fields: [certificationBodyId], references: [id])
  renewalHistory        CertificationRenewal[]

  @@unique([productId, certificationBodyId])
  @@map("halal_certifications")
}

model HalalIngredient {
  id                    String                @id @default(cuid())
  name                  String
  type                  String                // Animal, Plant, Synthetic, etc.
  sourceCountry         String
  isHalalCertified      Boolean               @default(false)
  certificationBodyId   String?
  productId             String
  complianceLevel       ComplianceLevel       @default(FULLY_COMPLIANT)
  riskLevel             String                @default("LOW") // LOW, MEDIUM, HIGH
  lastVerified          DateTime?

  product               HalalProduct          @relation(fields: [productId], references: [id])
  certificationBody     HalalCertificationBody? @relation(fields: [certificationBodyId], references: [id])

  @@map("halal_ingredients")
}

model HalalInventory {
  id                    String                @id @default(cuid())
  productId             String
  warehouseLocation     String
  region                MarketRegion
  quantityOnHand        Int
  reservedQuantity      Int                   @default(0)
  reorderPoint          Int
  maxStock              Int
  batchNumber           String?
  expiryDate            DateTime?
  certificationExpiry   DateTime?
  complianceVerified    Boolean               @default(false)
  lastStockCheck        DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  product               HalalProduct          @relation(fields: [productId], references: [id])
  movements             InventoryMovement[]

  @@map("halal_inventory")
}

model HalalSales {
  id                    String                @id @default(cuid())
  productId             String
  region                MarketRegion
  quantity              Int
  revenue               Float
  unitPrice             Float
  customerSegment       String                // B2B, B2C, Retail, Wholesale
  seasonalFactor        SeasonalDemand
  saleDate              DateTime
  month                 Int
  year                  Int
  createdAt             DateTime              @default(now())

  product               HalalProduct          @relation(fields: [productId], references: [id])

  @@index([productId, region, saleDate])
  @@map("halal_sales")
}

model MarketData {
  id                    String                @id @default(cuid())
  productId             String
  region                MarketRegion
  demandIndex           Float                 // 0-100
  marketShare           Float                 // percentage
  competitorCount       Int
  averagePrice          Float
  seasonalMultiplier    Float                 @default(1.0)
  growthRate            Float                 // percentage
  consumerTrend         String                // Growing, Stable, Declining
  recordDate            DateTime
  createdAt             DateTime              @default(now())

  product               HalalProduct          @relation(fields: [productId], references: [id])

  @@index([productId, region, recordDate])
  @@map("market_data")
}

model ComplianceCheck {
  id                    String                @id @default(cuid())
  productId             String
  checkType             String                // Ingredient, Process, Certification, Storage
  status                ComplianceLevel
  findings              String?
  correctiveActions     String?
  checkDate             DateTime
  nextCheckDue          DateTime?
  auditorName           String?
  severity              String                @default("LOW") // LOW, MEDIUM, HIGH, CRITICAL
  resolved              Boolean               @default(false)
  createdAt             DateTime              @default(now())

  product               HalalProduct          @relation(fields: [productId], references: [id])

  @@map("compliance_checks")
}

model CertificationRenewal {
  id                    String                @id @default(cuid())
  certificationId       String
  renewalDate           DateTime
  previousExpiryDate    DateTime
  newExpiryDate         DateTime
  processingTime        Int                   // days
  cost                  Float
  status                String                // Completed, Pending, Delayed
  notes                 String?
  createdAt             DateTime              @default(now())

  certification         HalalCertification    @relation(fields: [certificationId], references: [id])

  @@map("certification_renewals")
}

model ManufacturerAudit {
  id                    String                @id @default(cuid())
  manufacturerId        String
  auditDate             DateTime
  auditType             String                // Annual, Surprise, Complaint-based
  overallScore          Float                 // 0-100
  complianceLevel       ComplianceLevel
  findings              String?
  recommendations       String?
  followUpRequired      Boolean               @default(false)
  followUpDate          DateTime?
  auditorName           String
  createdAt             DateTime              @default(now())

  manufacturer          HalalManufacturer     @relation(fields: [manufacturerId], references: [id])

  @@map("manufacturer_audits")
}

model AuditReport {
  id                    String                @id @default(cuid())
  certificationBodyId   String
  reportDate            DateTime
  totalAudits           Int
  passRate              Float                 // percentage
  averageScore          Float
  issuesIdentified      Int
  correctiveActions     Int
  reportPeriod          String                // Monthly, Quarterly, Annual
  createdAt             DateTime              @default(now())

  certificationBody     HalalCertificationBody @relation(fields: [certificationBodyId], references: [id])

  @@map("audit_reports")
}

model InventoryMovement {
  id                    String                @id @default(cuid())
  inventoryId           String
  movementType          String                // IN, OUT, TRANSFER, ADJUSTMENT
  quantity              Int
  reason                String?
  batchNumber           String?
  movementDate          DateTime
  userId                String?
  notes                 String?
  createdAt             DateTime              @default(now())

  inventory             HalalInventory        @relation(fields: [inventoryId], references: [id])

  @@map("inventory_movements")
}

// Business Intelligence and Simulation Models
model BusinessMetrics {
  id                    String                @id @default(cuid())
  metricName            String
  metricValue           Float
  metricUnit            String
  category              String                // Compliance, Sales, Inventory, Market
  region                MarketRegion?
  calculationDate       DateTime
  period                String                // Daily, Weekly, Monthly, Quarterly
  createdAt             DateTime              @default(now())

  @@index([metricName, calculationDate])
  @@map("business_metrics")
}

model SimulationScenario {
  id                    String                @id @default(cuid())
  scenarioName          String
  description           String?
  parameters            Json                  // Flexible parameters for different scenarios
  baselineMetrics       Json                  // Starting metrics
  projectedOutcome      Json                  // Expected results
  actualOutcome         Json?                 // Real results if executed
  status                String                @default("DRAFT") // DRAFT, ACTIVE, COMPLETED, CANCELLED
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  executedAt            DateTime?
  createdBy             String?

  @@map("simulation_scenarios")
}

// Legacy Models for Backward Compatibility

model LegacyProduct {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  description String?
  category    String
  weight      Float
  dimensions  String   // e.g., "10x20x30 cm"
  manufacturerId String

  manufacturer LegacyManufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  certifications LegacyProductCertification[]
  ingredients    LegacyIngredient[]
  warehouseStorages LegacyWarehouseStorage[]

  @@map("legacy_products")
}

model LegacyManufacturer {
  id             String   @id @default(cuid())
  name           String
  companyDetails String?
  contactInfo    String   // e.g., phone, email, address

  products       LegacyProduct[]

  @@map("legacy_manufacturers")
}

model LegacyCertificationBody {
  id               String   @id @default(cuid())
  name             String
  licenseNumber    String   @unique
  validityPeriodStart DateTime
  validityPeriodEnd   DateTime

  productCertifications LegacyProductCertification[]
  ingredientCertifications LegacyIngredient[]

  @@map("legacy_certification_bodies")
}

model LegacyProductCertification {
  id                   String   @id @default(cuid())
  productId            String
  certificationBodyId  String
  issueDate            DateTime
  expiryDate           DateTime

  product             LegacyProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  certificationBody   LegacyCertificationBody @relation(fields: [certificationBodyId], references: [id], onDelete: Cascade)

  @@unique([productId, certificationBodyId, issueDate])
  @@map("legacy_product_certifications")
}

model LegacyIngredient {
  id                   String   @id @default(cuid())
  name                 String
  description          String?
  supplierId           String
  certificationId      String   // FK to LegacyCertificationBody
  productId            String

  supplier             Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  certificationBody    LegacyCertificationBody @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  product              LegacyProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("legacy_ingredients")
}

model LegacyWarehouseStorage {
  id                     String   @id @default(cuid())
  productId              String
  location               String   // e.g., ASRS bin ID
  quantityOnHand         Int
  batchLotNumber         String?
  certificationExpiryCheck Boolean @default(true)  // Enforce expiry check

  product                LegacyProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("legacy_warehouse_storages")
}

// IPFS File Storage for HalalChain

model IPFSFile {
  id             String   @id @default(cuid())
  name           String
  hash           String   @unique
  ipfsHash       String   @unique
  size           Int
  type           String
  uploadedAt     DateTime @default(now())
  status         String   @default("pinned") // pinned, unpinned, pending
  halalCertified Boolean  @default(false)
  certifyingBody String?
  description    String?
  blockchainTx   String?

  @@map("ipfs_files")
}

// Blockchain Transaction Ledger for HalalChain

model BlockchainTransaction {
  id          String   @id @default(cuid())
  hash        String   @unique
  type        BlockchainTransactionType
  status      BlockchainTransactionStatus @default(PENDING)
  blockNumber Int?
  gasUsed     Int?
  timestamp   DateTime @default(now())
  entityId    String   // ID of the related entity (item, product, supplier, document)
  entityType  String   // item, product, supplier, document
  halalCertified Boolean @default(false)
  certifyingBody String?
  ipfsHash    String?

  @@map("blockchain_transactions")
}

// Smart Contract Management

model SmartContract {
  id             String   @id @default(cuid())
  address        String   @unique
  name           String
  version        String
  abi            Json     // Contract ABI
  bytecode       String?
  deployedAt     DateTime?
  lastInteraction DateTime?
  functions      Json     // Available functions
  status         String   @default("active")

  @@map("smart_contracts")
}

// Blockchain Network Statistics

model BlockchainNetworkStats {
  id              String   @id @default(cuid())
  timestamp       DateTime @default(now())
  blockHeight     Int
  activePeers     Int
  totalTransactions Int
  gasPrice        Float?
  networkLatency  Float?
  consensusStatus String   @default("healthy")

  @@map("blockchain_network_stats")
}
