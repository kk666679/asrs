 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Warehouse Management System Schema

enum Temperature {
  AMBIENT
  REFRIGERATED
  FROZEN
}

enum SecurityLevel {
  LOW
  MEDIUM
  HIGH
  RESTRICTED
}

enum HazardLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum BinStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DAMAGED
}

enum MovementType {
  PUTAWAY
  PICKING
  TRANSFER
  ADJUSTMENT
  COUNT
}

enum MovementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ShipmentType {
  INBOUND
  OUTBOUND
  TRANSFER
}

enum ShipmentStatus {
  PLANNED
  IN_TRANSIT
  RECEIVED
  PARTIALLY_RECEIVED
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RackOrientation {
  FRONT
  BACK
  SIDE
}

// Core Entities

model Warehouse {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  zones       Zone[]
  users       User[]
  shipments   Shipment[]

  @@map("warehouses")
}

model Zone {
  id            String        @id @default(cuid())
  code          String        @unique
  name          String
  temperature   Temperature
  securityLevel SecurityLevel
  warehouseId   String

  warehouse     Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  aisles        Aisle[]

  @@map("zones")
}

model Aisle {
  id          String   @id @default(cuid())
  code        String   @unique
  number      Int
  width       Float
  height      Float
  zoneId      String

  zone        Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  racks       Rack[]

  @@map("aisles")
}

model Rack {
  id          String          @id @default(cuid())
  code        String          @unique
  level       Int
  orientation RackOrientation
  aisleId     String

  aisle       Aisle    @relation(fields: [aisleId], references: [id], onDelete: Cascade)
  bins        Bin[]

  @@map("racks")
}

model Bin {
  id          String     @id @default(cuid())
  code        String     @unique
  capacity    Int
  currentLoad Int       @default(0)
  weightLimit Float
  status      BinStatus @default(ACTIVE)
  rackId      String

  rack        Rack       @relation(fields: [rackId], references: [id], onDelete: Cascade)
  binItems    BinItem[]
  fromMovements Movement[] @relation("MovementFromBin")
  toMovements   Movement[] @relation("MovementToBin")

  @@map("bins")
}

model Item {
  id          String       @id @default(cuid())
  sku         String       @unique
  name        String
  category    String
  weight      Float
  hazardLevel HazardLevel @default(NONE)
  temperature Temperature @default(AMBIENT)
  minStock    Int         @default(0)
  maxStock    Int?
  supplierId  String

  supplier    Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  binItems    BinItem[]
  shipmentItems ShipmentItem[]

  @@map("items")
}

model BinItem {
  id          String   @id @default(cuid())
  quantity    Int
  batchNumber String?
  expiryDate  DateTime?
  binId       String
  itemId      String

  bin         Bin      @relation(fields: [binId], references: [id], onDelete: Cascade)
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  movements   Movement[]

  @@unique([binId, itemId, batchNumber])
  @@map("bin_items")
}

model Movement {
  id          String         @id @default(cuid())
  type        MovementType
  quantity    Int
  status      MovementStatus @default(PENDING)
  priority    Priority       @default(MEDIUM)
  timestamp   DateTime       @default(now())
  binItemId   String
  fromBinId   String?
  toBinId     String?
  userId      String

  binItem     BinItem @relation(fields: [binItemId], references: [id], onDelete: Cascade)
  fromBin     Bin?    @relation("MovementFromBin", fields: [fromBinId], references: [id])
  toBin       Bin?    @relation("MovementToBin", fields: [toBinId], references: [id])
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("movements")
}

model Supplier {
  id      String         @id @default(cuid())
  code    String         @unique
  name    String
  contact String?
  email   String?
  status  SupplierStatus @default(ACTIVE)

  items     Item[]
  shipments Shipment[]

  @@map("suppliers")
}

model Shipment {
  id                String         @id @default(cuid())
  shipmentNumber    String         @unique
  type              ShipmentType
  status            ShipmentStatus @default(PLANNED)
  expectedArrival   DateTime?
  actualArrival     DateTime?
  warehouseId       String
  supplierId        String

  warehouse         Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  supplier          Supplier   @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  shipmentItems     ShipmentItem[]

  @@map("shipments")
}

model ShipmentItem {
  id         String @id @default(cuid())
  quantity   Int
  received   Int    @default(0)
  shipmentId String
  itemId     String

  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("shipment_items")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  role      UserRole   @default(OPERATOR)
  status    UserStatus @default(ACTIVE)
  warehouseId String

  warehouse Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  movements Movement[]

  @@map("users")
}
